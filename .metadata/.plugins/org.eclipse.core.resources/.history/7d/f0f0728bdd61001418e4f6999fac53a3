package org.eseTeam2.controller.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.eseTeam2.controller.pojos.AdForm;
import org.eseTeam2.model.Advertisement;
import org.eseTeam2.model.Picture;
import org.eseTeam2.model.Roomie;
import org.eseTeam2.model.User;
import org.eseTeam2.model.dao.AdvertisementDao;
import org.eseTeam2.model.dao.PictureDao;
import org.eseTeam2.model.dao.RoomieDao;
import org.eseTeam2.model.dao.UserDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

@Service
public class RoomieDataService implements IRoomieDataService {

	@Autowired
	RoomieDao roomieDao;

	@Autowired
	PictureDao pictureDao;

	@Autowired
	UserDao userDao;

	public Iterable<Roomie> getRoomies() {
		return roomieDao.findAll();
	}

	public Roomie getRoomie(Long id) {
		return roomieDao.findOne(id);
	}

	public RoomieForm saveFrom(RoomieForm roomieForm, ArrayList<Picture> picturesToSave) {

		Roomie roomie = new Roomie();
		Set<Roomie> roomiesOfUser = new HashSet<Roomie>();
		// set the pictures
		User creator = roomieForm.getCreator();
		if ( !creator.getRoomies().isEmpty()) {
			roomiesOfUser = creator.getRoomies();
		}
		
		Set<Picture> pictures = new HashSet<Picture>();
		
		for ( int i = 1; i < picturesToSave.size(); i++) {
			pictures.add(picturesToSave.get(i));
		}

		roomie.setPictures(pictures);
		roomie.setMainPic(picturesToSave.get(0));
		
		for ( int i = 0; i < picturesToSave.size(); i++) {
			try {
				pictureDao.save(picturesToSave.get(i));
			}
			catch (Exception d) {}
		}

		// set basics for roomie
		roomie.setDescription(roomieForm.getDescription());
		roomie.setCreator(roomieForm.getCreator());
		roomie.setCreationDate(new Date());
		roomie.setPersonalityType(roomieForm.getPersonalityType());
		roomie.setSmoker(roomieForm.isSmoker());
		roomie.setHasPets(roomieForm.isHasPets());
		roomie.setGender(roomieForm.getGender());
		roomie.setAge(roomieForm.getAge());
		
		// other
		roomiesOfUser.add(roomie);
		creator.setRoomies(roomiesOfUser);
		
		
		roomie = roomieDao.save(roomie); // save object to DB
		
		creator  = userDao.save(creator);
		
		roomieForm.setId(roomie.getId());

		return adForm;
	}

	public String getPicture(Long picId) {
		return pictureDao.findOne(picId).getAbsoluteFilePath();
	}

	public ArrayList<Long> getRoomiePictureIds(Long roomieId) {

		Set<Picture> pictures = getRoomie(roomieId).getPictures();
		ArrayList<Long> pics = new ArrayList<Long>();

		for (Picture picture : pictures) {
			if (picture.getAbsoluteFilePath() != null) {

				if (picture.getIsMainPic() == false)
					pics.add(picture.getId());

			}

		}
		return pics;

	}
	
	public ArrayList<Picture> getRoomiePictures(Long roomieId) {

		Set<Picture> pictures = getRoomie(roomieId).getPictures();
		ArrayList<Picture> pics = new ArrayList<Picture>();
		

		for (Picture picture : pictures) {
			if (picture.getAbsoluteFilePath() != null) {

				if (picture.getIsMainPic() == false)
					pics.add(picture);

			}

		}
		return pics;

	}

	public Picture getRoomieMainPic (Long roomieId) {
		return roomieDao.findOne(roomieId).getMainPic();
	}


	public Set<Picture> getPicturesOfRoomie(Long roomieId) {
		return roomieDao.findOne(roomieId).getPictures();
	}

	public void deleteOne(Long roomieId, User user) {
		Set<Roomie> userRoomies= user.getRoomies();
		for( Roomie roomie: userRoomies) {
			if(roomie.getId() == roomieId)
				userRoomies.remove(roomie);
		}
		
		user.setRoomies(userRoomies);
		userDao.save(user);
		
		roomieDao.delete(roomieId);
	}
	}


